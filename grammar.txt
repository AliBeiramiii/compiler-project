----------------------------------------------------------------------------------------------------------------------
//ALPHABET
letter : "a" | . . . | "z" | "A" | . . . | "Z"
digit : "0" | . . . | "9"
intNum : digit digit*
floatNum : digit* "." intNum | intNum "." digit*
assignNumOp : "-=" | "+=" | "*=" | "/=" | "=" | "%="
relOp : "<=" | "<" | ">" | ">=" | "==" | "!="   
Ident : letter(digit | letter | "_")
Bool : "false" | "true"
----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
//DEFINE
S : defineDecl
defineDecl : "#Define" Ident (floatNum | intNum | bool)"\n" defineDecl | program

//MAIN PROGRAM
program : (intDecl | boolDecl | varDecl | floatDecl | constDecl | assignList)*

//ASSIGN LIST
assignList : (intAssignStmt | floatAssignStmt | boolAssignStmt | ifStmt | doWhileStmt | forStmt | SwitchStmt |
              oneLineComment | multiLineComment | unaryExpr | ternaryStmt | printStmt | minStmt | maxStmt | meanStmt | sqrtNStmt )*
---------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
//COMMENTS
oneLineComment : "//" Σ
multiLineComment : "/*" Σ "*/"
----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
//INT DECL
intDecl : "int" (intDeclWithAssign | intDeclWithoutAssign | intDeclCast)";"
intDeclWithoutAssign : (Ident",")* Ident
intDeclCast : Ident "=int(" floatNum | intNum | bool ")"
intDeclWithAssign : Ident "," intDeclWithAssign "," mathIntExpr | Ident "," intDeclWithAssign | Ident "=" mathIntExpr

//INT MATH
mathIntExpr : termInt (("+"| "-" ) termInt)*
termInt : factorInt (("*" | "/" | "%") factorInt)*
factorInt : finalInt ("^" finalInt)*
finalInt : "(" mathIntExpr ")" | "-(" mathIntExpr ")" | Ident | intNum | "-"intNum | "+"intNum | Ident"++" | Ident"--"
----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
//FLOAT DECL
floatDecl : "float" (floatDeclWithAssign | floatDeclWithoutAssign | floatDeclCast)";"
floatDeclWithoutAssign : (Ident",")* Ident
floatDeclCast : Ident "=float(" floatNum | intNum | bool ")"
floatDeclWithAssign : Ident "," floatDeclWithAssign "," mathFloatExpr | Ident "," floatDeclWithAssign | Ident "=" mathFloatExpr

//FLOAT MATH
mathFloatExpr : termFloat (("+"| "-" ) termFloat)*
termFloat : factorFloat (("*" | "/") factorFloat)*
factorFloat : finalFloat ("^" finalFloat)*
finalFloat : "(" mathFloatExpr ")" | "-(" mathFloatExpr ")" | Ident | floatNum | "-"floatNum | "+"floatNum | Ident"++" | Ident"--"
----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
//BOOL DECL
boolDecl : "bool" (boolDeclWithAssign | boolDeclWithoutAssign | boolDeclCast)";"
boolDeclWithoutAssign : (Ident ",")* Ident
boolDeclCast : Ident "=bool(" floatNum | intNum | bool ")"
boolDeclWithAssign : Ident "," boolDeclWithAssign "," logicalExpr | Ident "," boolDeclWithAssign | Ident "=" logicalExpr

//BOOL LOGIC
logicalExpr : comparison (("and" | "xor" | "or") comparison)*
comparison : mathIntExpr relOp mathIntExpr| mathFloatExpr relOp mathFloatExpr | 
             Ident ( "not" | "" ) "in[" ((intNum "," )* intNum) | ((floatNum "," )* floatNum) "]" |
             "(" logicalExpr ")" | Bool | Ident
----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
//VAR DECL
varDecl : "var" (varDeclWithAssign | varDeclWithoutAssign)";"
varDeclWithoutAssign : (Ident",")* Ident
varDeclWithAssign : Ident "," varDeclWithAssign "," mathIntExpr | Ident "," varDeclWithAssign "," mathFloatExpr | Ident "," varDeclWithAssign "," logicalExpr |
                    Ident "=" mathIntExpr | Ident "=" mathFloatExpr | Ident "=" logicalExpr |
                    Ident "," varDeclWithAssign
----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
//CONST DECL
constDecl : "const" ("int" intDeclWithAssign | "float" floatDeclWithAssign | "var" varDeclWithAssign | "bool" boolDeclWithAssign)";"
----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
//ASSIGN VARIABLE
intAssignStmt : Ident assignNumOp mathIntExpr";"
floatAssignStmt : Ident assignNumOp-{"%="} mathFloatExpr";"
boolAssignStmt : Ident "=" logicalExpr";"
----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
//MATH FUNCS
minStmt : "min(" (floatNum | intNum) "," (floatNum | intNum) ");"
maxStmt : "max(" (floatNum | intNum) "," (floatNum | intNum) ");"
meanStmt : "mean(" Ident "," Ident ");"
sqrtNStmt : "sqrtN("(intNum | floatNum) "," intNum ");"
----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
//If
ifStmt : "if(" logicalExpr "){" (assignList | "break;" | "continue;") "}" elseIfStmt | 
         "if(" logicalExpr "){" (assignList | "break;" | "continue;") "}" elseIfStmt "else{" (assignList | "break;" | "continue;") "}"
elseIfStmt : ( "else if (" logicalExpr "){" (assignList | "break;" | "continue;") "}" )*
----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
//TERNARY OP
ternaryStmt : Ident "=" logicalExpr "?" typeTernary ";"
typeTernary :  (Ident ":" Ident) | (intNum ":" intNum) | (floatNum ":" floatNum) | (bool ":" bool)
----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
//DO WHILE
doWhileStmt: "do{" (assignList | "break;" | "continue;") "}while(" logicalExpr ")"
----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
//FOR
forStmt : "for(" intAssignStmt ";" logicalExpr ";" thirdPartFor "){" (assignList | "break;" | "continue;") "}"
thirdPartFor : Ident assignNumOp-{"="} mathIntExpr | Ident"--" | Ident"++"
----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
//SWITCH
SwitchStmt : "switch(" Ident "){" caseStmt "}"
caseStmt : ("case" intNum ":" assignList ("break;" | "" ))* 
           (("default:" assignList ("break;" | "" )) | "") 
           ("case" intNum ":" assignList ("break;" | "" ))*
----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
//PRINT
printStmt : "print(" (logicalExpr | Ident | mathFloatExpr | mathIntExpr) ");"
----------------------------------------------------------------------------------------------------------------------

    
